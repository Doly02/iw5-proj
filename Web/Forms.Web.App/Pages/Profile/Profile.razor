@page "/profile"
@inject UserFacade UserFacade
@inject FormFacade FormFacade
@inject AuthenticationStateProvider AuthenticationStateProvider

@namespace Forms.Web.App.Pages
@using Forms.Common.Models.Form
@using Forms.Common.Models.User
@using Forms.Web.BL.Facades
@using Microsoft.AspNetCore.Components.Authorization

<h3>Profil</h3>

@if (User is null)
{
    <p>Načítám data...</p>
}
else
{
    <EditForm Model="EditUser" OnValidSubmit="UpdateProfile">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="card text-center">
            <img src="@(!string.IsNullOrWhiteSpace(User.PhotoUrl) ? User.PhotoUrl : "https://upload.wikimedia.org/wikipedia/commons/a/ac/Default_pfp.jpg?20200418092106")" class="card-img-top mx-auto" alt="Profilová fotografie" style="width: 16rem;">
            <div class="card-body">
                <h5 class="card-title">@User.FirstName @User.LastName</h5>
                <p>Email: @User.Email</p>

                <div class="form-group mb-3">
                    <label for="firstName">Jméno</label>
                    <InputText id="firstName" class="form-control" @bind-Value="EditUser.FirstName" />
                </div>

                <div class="form-group mb-3">
                    <label for="lastName">Příjmení</label>
                    <InputText id="lastName" class="form-control" @bind-Value="EditUser.LastName" />
                </div>

                <div class="form-group mb-3">
                    <label for="photoUrl">URL Profilové fotografie</label>
                    <InputText id="photoUrl" class="form-control" @bind-Value="EditUser.PhotoUrl" />
                </div>

                <button type="submit" class="btn btn-primary">Uložit změny</button>
            </div>
        </div>
    </EditForm>

    <p class="text-success">@StatusMessage</p>
}
@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <p class="text-danger">@ErrorMessage</p>
}

@if (User?.Forms.Count == 0)
{
<p>Žádné formuláře na zobrazení.</p>
}
else
{
<div class="row">
    @foreach (var form in User!.Forms)
    {
    <div class="col-md-4 mb-4">
        <div class="card">
            <img src="icons/document.png" class="card-img-top w-50 h-50" alt="Formulář">
            <div class="card-body">
                <h4 class="card-title">@form.Name</h4>
                @if (DateTime.Now >= @form.DateOpen && DateTime.Now <= @form.DateClose)
                {
                <a href="/form/@form.Id" class="btn btn-primary">Zobrazit detail</a>
                <a href="/questions/@form.Id" class="btn btn-secondary">Zobrazit odpovědi</a>
                }
                else
                {
                <img src="icons/lock.png" class="h-auto" style="width: 37px;" alt="Zamknuto">
                }
                <a href="/form/edit/@form.Id" class="btn btn-primary">Editovať</a>
            </div>
        </div>
    </div>
    }
</div>
}

@code {
    private UserDetailModel? User { get; set; }
    private UserDetailModel? EditUser { get; set; }
    private string StatusMessage { get; set; } = string.Empty;
    private string ErrorMessage { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var currentUser = authState.User;

        if (!currentUser.Identity?.IsAuthenticated ?? true)
        {
            ErrorMessage = "Uživatel není přihlášen.";
            return;
        }

        var userIdClaim = currentUser.FindFirst("id");
        if (userIdClaim == null || !Guid.TryParse(userIdClaim.Value, out var userId))
        {
            ErrorMessage = "Nepodařilo se načíst ID aktuálního uživatele.";
            return;
        }

        try
        {
            User = await UserFacade.GetByIdAsync(userId);
            if (User == null)
            {
                ErrorMessage = "Uživatel nebyl nalezen.";
            }
            else
            {
                EditUser = new UserDetailModel
                {
                    Id = User.Id,
                    Email = User.Email,
                    FirstName = User.FirstName,
                    LastName = User.LastName,
                    PhotoUrl = User.PhotoUrl
                };
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Chyba při načítání uživatele: {ex.Message}";
        }
    }

    private async Task UpdateProfile()
    {
        try
        {
            if (User != null && EditUser != null)
            {
                User.FirstName = EditUser.FirstName;
                User.LastName = EditUser.LastName;
                User.PhotoUrl = EditUser.PhotoUrl;

                await UserFacade.SaveAsync(User);
                StatusMessage = "Změny byly úspěšně uloženy.";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Chyba při ukládání změn: {ex.Message}";
        }
    }
}
